from flask import Flask, request, render_template_string
import sqlite3

app = Flask(__name__)


# Create a connection to the database
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn


# Create a table and insert a user for demo purposes
def init_db():
    conn = get_db_connection()
    conn.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)')
    conn.execute('INSERT INTO users (username, password) VALUES (?, ?)', ('admin', 'password123'))
    conn.commit()
    conn.close()


# Display login form
@app.route('/')
def index():
    return '''
        <h1>SQL Injection Vulnerability Login Example</h1>
        <form method="post" action="/login">
            <label>Username:</label>
            <input type="text" name="username"><br>
            <label>Password:</label>
            <input type="text" name="password"><br>
            <button type="submit">Login</button>
        </form>
        <form method="post" action="/secure_login">
            <label>Username:</label>
            <input type="text" name="username"><br>
            <label>Password:</label>
            <input type="text" name="password"><br>
            <button type="submit">Secure Login</button>
        </form>

    '''


# Vulnerable Login Function
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']

    conn = get_db_connection()
    query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
    result = conn.execute(query).fetchone()
    conn.close()

    if result:
        return f"Welcome {username}!"
    else:
        return "Invalid credentials."

@app.route('/secure_login', methods=['POST'])
def secure_login():
    username = request.form['username']
    password = request.form['password']

    conn = get_db_connection()
    query = "SELECT * FROM users WHERE username = ? AND password = ?"
    result = conn.execute(query, (username, password)).fetchone()
    conn.close()

    if result:
        return f"Welcome {username}!"
    else:
        return "Invalid credentials."


# ? placeholders prevent SQL injection by safely passing user input to the query.

if __name__ == '__main__':
    init_db()  # Initialize the database
    app.run(debug=True)
